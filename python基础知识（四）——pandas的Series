#####################################
###（1）序列，可看做向量，是列表和元组的高级版本
#（1.1）将列表ls=[1,2,3]传入序列s1
ls=[1,2,3]
import pandas as pd
s1=pd.Series(ls)
print(s1,'\n')

#(1.2)将序列s1中的每个元素均加上10，形成序列s2
s2=s1+10
print(s2,'\n')

#(1.3)将序列s1中的每个元素均平方，形成序列s3
s3=pow(s1,2)
print(s3,'\n')

###########################################
###(2)序列索引
import numpy as np
import pandas as pd
np.random.seed(1)
s1=pd.Series(np.random.randint(size=5,low=1,high=10))
print(s1,'\n')
#（2.1）获取序列s1的第二个元素
print(s1[1])

#（2.2）获取序列s1第2-3个元素
print(s1[1:3],']n')

#(2.3)获取序列s1，步长为2的元素
print(s1[::2],'\n')

#（2.4）获取序列s1的倒数第三个元素
print(s1.iat[-3],'\n')
'''不能直接用倒数的索引方法，需要iat方法'''

#（2.5）获取倒数第三个和后面的所有元素
print(s1[-3:])

#(2.6)获取序列s1中大于5的元素
print(s1[s1>5],'\n')

#(2.7)获取序列s1中大于5小于10的元素
print(s1[s1>5][s1<10],'\n')
'''序列是列表的扩张版，和列表的索引方法基本相同'''
##############################################
###(3)判断元素是否包含于另一个向量
import numpy as np
import pandas as pd
arr1=np.array([1,2,3,4])
arr2=np.array([10,20,3,40])

#(3.1)判断arr1的元素是否包含于arr2
#方法一：
print(np.in1d(arr1,arr2),'\n')
#方法二：
s1=pd.Series(arr1)
s2=pd.Series(arr2)
print(s1.isin(s2),'\n')

###################################################
###（4）去重和统计
np.random.seed(10)
s=np.random.randint(size=10,low=1,high=4)

#(4.1)对s去重
print(pd.unique(s),'\n')

#(4.2)统计s中每个元素的个数
print(pd.value_counts(s),'\n')

#(4.3)对s按索引降序
s=pd.Series(s)
print(s.sort_index(ascending=False),'\n')

#(4.4)对s的值按升序排序
print(s.sort_values())

#####################################################
###(5)抽样
s=pd.Series(range(1,101))
#(5.1)从s中抽出3个样本数据，指定抽样的随机种子为2
print(s.sample(n=3,random_state=2),'\n')

#(5.2)从1-5中有放回的抽取3个值,抽样的随机种子为2
s=pd.Series(range(1,6))
print(s.sample(n=3,replace=True,random_state=2),'\n')

#(5.3)从男女性别中不等概率的抽取10个样本，男的概率为0.8，女为0.2,随机种子为3
s=pd.Series(['男','女'])
s.sample(n=10,replace=True,weights=[0.8,0.2],random_state=3)


############################################
###（6）统计运算
#（6.1）s的统计基本信息
s.describe()

#（6.2）判断s的元素是否缺失
print(s.isnull(),'\n')

#(6.3)求s的缺失个数
print(sum(s.isnull()),'\n')

#(6.4)构建一个含有3个缺失值的序列，大小为5，其他元素为1和2
s=pd.Series([1,np.nan,2,np.nan,np.nan])

#(6.5)统计s的缺失个数
print(sum(s.isnull()))
